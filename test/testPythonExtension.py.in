import sys

try:
    import unittest
except:
    print("***********************************************************")
    print("* WARNING!! Couldn't import python unittesting framework! *")
    print("* No python tests have been executed                      *")
    print("***********************************************************")
    sys.exit(0)

try:
    import crpropa as crp
except Exception as e:
    print("*** CRPropa import failed")
    print(type(e), str(e))
    sys.exit(-1)

numpy_available = True
try:
    import numpy as np
except Exception as e:
    print("*** numpy import failed. Not testing numpy interface")
    numpy_available = False


class testCrossLanguagePolymorphism(unittest.TestCase):

    def test_module(self):
        class CountingModule(crp.Module):
            def __init__(self):
                crp.Module.__init__(self)
                self.count = 0

            def process(self, c):
                self.count += 1

        count_accept = CountingModule()
        count_reject = CountingModule()
        filter = crp.ParticleFilter([-1, 1])
        filter.onAccept(count_accept)
        filter.onReject(count_reject)

        c = crp.Candidate()

        for id in [-1, 1, 6, 9, -19, 23, 100010001]:
            c.current.setId(id)
            filter.process(c)

    def test_ParticleCollector(self):
        c = crp.Candidate()
        p = crp.ParticleCollector()
        p.process(c)
        c_out = p[0]
        for c_i in p:
            c_out = c_i

    def test_ObserverFeature(self):
        class CountingFeature(crp.ObserverFeature):
            def __init__(self):
                crp.ObserverFeature.__init__(self)
                self.value = 0

            def checkDetection(self, candidate):
                self.value += 1
                return crp.DETECTED

        obs = crp.Observer()
        counter = CountingFeature()
        obs.add(counter)
        for i in range(5):
            candidate = crp.Candidate()
            obs.process(candidate)
            self.assertEqual(i + 1, counter.value)


class testCandidatePropertymap(unittest.TestCase):
    def setUp(self):
        self.candidate = crp.Candidate()

    def __propertySetGet(self, value):
        self.candidate.setProperty('Foo', value)
        self.assertEqual(value, self.candidate.getProperty('Foo'))

    def testString(self):
        self.__propertySetGet('Bar')

    def testUnicode(self):
        self.__propertySetGet(u'Bar')

    def testUnicodeName(self):
        self.candidate.setProperty(u'Foo', 23)
        self.assertEqual(23, self.candidate.getProperty(u'Foo'))

    def testBool(self):
        self.__propertySetGet(True)
        self.__propertySetGet(False)

    def testInt(self):
        self.__propertySetGet(42)
        # thsi won't work in python3 
        #if numpy_available:
        #    v = np.array([2], dtype=int)
        #    self.__propertySetGet(v[0])

    def testFloat(self):
        self.__propertySetGet(3.14)
        if numpy_available:
            v = np.array([2.])
            self.__propertySetGet(v[0])


if __name__ == '__main__':
    unittest.main()
