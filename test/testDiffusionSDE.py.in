import sys

try:
    import unittest
except:
    print("***********************************************************")
    print("* WARNING!! Couldn't import python unittesting framework! *")
    print("* No python tests have been executed                      *")
    print("***********************************************************")
    sys.exit(0)

try:
    from scipy.stats import anderson, chisquare
    from scipy.integrate import quad
    import numpy as np
except:
    print("***********************************************************") 
    print("* WARNING!! Couldn't import python scipy or numpy framework! *")
    print("* No python tests have been executed                      *")
    print("***********************************************************")
    sys.exit(-1)

try:
    import crpropa
    from crpropa import nG, kpc, pc, TeV, PeV, c_light
except Exception as e:
    print("*** CRPropa import failed")
    print(type(e), str(e))
    sys.exit(-2)

class DiffusionOneDirection(unittest.TestCase):
    # magnetic field
    ConstMagVec = crpropa.Vector3d(0*nG,0*nG,1*nG)
    BField = crpropa.UniformMagneticField(ConstMagVec)
    Dif = crpropa.DiffusionSDE(BField, 1e-4, 1*pc, 10*kpc, 0.)

    maxTra = crpropa.MaximumTrajectoryLength(50 *kpc)
    msg1 = "Note that this is a statistical test. It might fail by chance with a probabilty O(0.00001)! You should rerun the test to make sure there is a bug."
    msg2 = "Note that this is a statistical test. It might fail by chance with a probabilty O(0.00001)! You should rerun the test to make sure there is a bug."
    
    zPosition10 = []
    zPosition1000 = []
    zPosition100000 = []

    def test_DiffusionEnergy10(self):
        E = 10 * TeV
        for i in range(10**4):
            c = crpropa.Candidate()
            c.current.setId(crpropa.nucleusId(1,1))
            c.current.setEnergy(E)
            while c.getTrajectoryLength() < 50 * kpc:
                self.maxTra.process(c)
                self.Dif.process(c)
            self.zPosition10.append(c.current.getPosition().z)
        A2, Level, significant = anderson(self.zPosition10, 'norm')
        self.assertLess(A2, 2.27, msg=self.msg1)
    
    def test_DiffusionEnergy1000(self):
        E = 1 * PeV
        for i in range(10**4):
            c = crpropa.Candidate()
            c.current.setId(crpropa.nucleusId(1,1))
            c.current.setEnergy(E)
            while c.getTrajectoryLength() < 50 * kpc:
                self.maxTra.process(c)
                self.Dif.process(c)
            self.zPosition1000.append(c.current.getPosition().z)
        A2, Level, significant = anderson(self.zPosition1000, 'norm')
        self.assertLess(A2, 2.27, msg=self.msg1)
        
    def test_DiffusionEnergy100000(self):
        E = 100 * PeV
        for i in range(10**4):
            c = crpropa.Candidate()
            c.current.setId(crpropa.nucleusId(1,1))
            c.current.setEnergy(E)
            while c.getTrajectoryLength() < 50 * kpc:
                self.maxTra.process(c)
                self.Dif.process(c)
            self.zPosition100000.append(c.current.getPosition().z)
        A2, Level, significant = anderson(self.zPosition100000, 'norm')
        self.assertLess(A2, 2.27, msg=self.msg1)
        
    def test_DiffusionEnergy10ChiSquare(self):
        N = len(self.zPosition10)
        Data = abs(np.array(self.zPosition10))
        bins = 10
        Dist = 50 * kpc
        rig = 10**13
                
        while min(np.histogram(Data, bins)[0]) < 5:
            bins -= 1
        
        f_exp = np.zeros(bins)

        hist = np.histogram(Data, bins=bins)
        
        def pdf(R):
            D = 6.1e24*pow((rig/4.0e9), 1./3.)
            t = Dist / c_light
            pdf = 2 * pow(4 * np.pi * D * t, -0.5) * np.exp(- R**2. / (4 * D * t))
            return pdf
        
        for i in range(bins):
            a, b = hist[1][i], hist[1][i+1]
            f_exp[i] = N*quad(pdf, a, b)[0]
        
        f_obs = np.histogram(Data, bins=bins)[0]
        chi2, pValue = chisquare(f_obs, f_exp)
        
        self.assertLess(pValue, 0.99999)
        self.assertGreater(pValue, 0.00001)
        
    def test_DiffusionEnergy1000ChiSquare(self):
        N = len(self.zPosition1000)
        Data = abs(np.array(self.zPosition1000))
        bins = 10
        Dist = 50 * kpc
        rig = 10**15
                
        while min(np.histogram(Data, bins)[0]) < 5:
            bins -= 1
        
        f_exp = np.zeros(bins)

        hist = np.histogram(Data, bins=bins)
        
        def pdf(R):
            D = 6.1e24*pow((rig/4.0e9), 1./3.)
            t = Dist / c_light
            pdf = 2 * pow(4 * np.pi * D * t, -0.5) * np.exp(- R**2. / (4 * D * t))
            return pdf
        
        for i in range(bins):
            a, b = hist[1][i], hist[1][i+1]
            f_exp[i] = N*quad(pdf, a, b)[0]
        
        f_obs = np.histogram(Data, bins=bins)[0]
        chi2, pValue = chisquare(f_obs, f_exp)
       
        self.assertLess(pValue, 0.99999)
        self.assertGreater(pValue, 0.00001)
        
    def test_DiffusionEnergy100000ChiSquare(self):
        N = len(self.zPosition100000)
        Data = abs(np.array(self.zPosition100000))
        bins = 10
        Dist = 50 * kpc
        rig = 10**17
                
        while min(np.histogram(Data, bins)[0]) < 5:
            bins -= 1
        
        f_exp = np.zeros(bins)

        hist = np.histogram(Data, bins=bins)
        
        def pdf(R):
            D = 6.1e24*pow((rig/4.0e9), 1./3.)
            t = Dist / c_light
            pdf = 2 * pow(4 * np.pi * D * t, -0.5) * np.exp(- R**2. / (4 * D * t))
            return pdf
        
        for i in range(bins):
            a, b = hist[1][i], hist[1][i+1]
            f_exp[i] = N*quad(pdf, a, b)[0]
        
        f_obs = np.histogram(Data, bins=bins)[0]
        chi2, pValue = chisquare(f_obs, f_exp)
        
        self.assertLess(pValue, 0.99999)
        self.assertGreater(pValue, 0.00001)


if __name__ == '__main__':
    unittest.main()
