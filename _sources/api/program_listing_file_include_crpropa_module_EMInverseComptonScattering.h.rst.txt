
.. _program_listing_file_include_crpropa_module_EMInverseComptonScattering.h:

Program Listing for File EMInverseComptonScattering.h
=====================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_crpropa_module_EMInverseComptonScattering.h>` (``include/crpropa/module/EMInverseComptonScattering.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef CRPROPA_EMINVERSECOMPTONSCATTERING_H
   #define CRPROPA_EMINVERSECOMPTONSCATTERING_H
   
   #include <fstream>
   #include <cmath>
   
   #include "crpropa/Module.h"
   #include "crpropa/PhotonBackground.h"
   
   namespace crpropa {
   class EMInverseComptonScattering: public Module {
   private:
           ref_ptr<PhotonField> photonField;
           bool havePhotons;
           double limit;
           double thinning;
           std::string interactionTag = "EMIC";
   
           // tabulated interaction rate 1/lambda(E)
           std::vector<double> tabEnergy;  
           std::vector<double> tabRate;  
           
           // tabulated CDF(s_kin, E) = cumulative differential interaction rate
           std::vector<double> tabE;  
           std::vector<double> tabs;  
           std::vector< std::vector<double> > tabCDF;  
   
   public:
           EMInverseComptonScattering(ref_ptr<PhotonField> photonField, bool havePhotons = false, double thinning = 0, double limit = 0.1);
   
           // set the target photon field 
           void setPhotonField(ref_ptr<PhotonField> photonField);
   
           // decide if secondary photons are added to the simulation
           void setHavePhotons(bool havePhotons);
   
           void setLimit(double limit);
   
           void setThinning(double thinning);
   
           void setInteractionTag(std::string tag);
           std::string getInteractionTag() const;
   
           void initRate(std::string filename);
           void initCumulativeRate(std::string filename);
   
           void process(Candidate *candidate) const;
           void performInteraction(Candidate *candidate) const;
   };
   } // namespace crpropa
   
   #endif // CRPROPA_EMINVERSECOMPTONSCATTERING_H
