import sys

try:
    import unittest
except:
    print("***********************************************************") 
    print("* WARNING!! Couldn't import python unittesting framework! *") 
    print("* No python tests have been executed                      *") 
    print("***********************************************************") 
    sys.exit(0)

try:
    import crpropa
except Exception as e:
    print("*** CRPropa import failed")
    print(type(e), str(e))
    sys.exit(-1)

from crpropa import EeV


class testPixelizationConsistency(unittest.TestCase):
    def testPixelizationInterface(self):
        p = crpropa.Pixelization(4)
        rd = p.pix2Direction(42)
        pix = p.direction2Pix(*rd)
        self.assertEqual(pix, 42)

        for i in range(p.getNumberOfPixels()):
            rd = p.getRandomDirectionInPixel(i)
            pix = p.direction2Pix(*rd)
            self.assertEqual(pix, i)


    def testConsistencyWithHealpy(self):
        try:
            import healpy
        except ImportError:
            print "Consistency with healpy not tested as healpy is" \
                  "not available"
            return
        p = crpropa.Pixelization(4)
        from numpy import linspace
        from math import pi
        for theta in linspace(0, pi):
            for phi in linspace(-pi, pi):
                crpropaIdx = p.direction2Pix(phi, pi / 2 - theta)
                hpIdx = healpy.ang2pix(2 ** 4, theta, phi)
                self.assertEqual(crpropaIdx, hpIdx)


class testParticleMapsContainer(unittest.TestCase):
    def setUp(self):
        self.maps = crpropa.ParticleMapsContainer()

    def testAddParticle(self):
        self.maps.addParticle(12, 1 * EeV, 0, 0)
        self.assertEquals(len(self.maps.getParticleIds()), 1)
        self.assertEquals(self.maps.getParticleIds()[0], 12)
        self.assertEquals(len(self.maps.getEnergies(12)), 1)

    def testAddParticleVectorInterface(self):
        self.maps.addParticle(12, 1 * EeV, crpropa.Vector3d(1, 0, 0))
        self.assertEquals(len(self.maps.getParticleIds()), 1)
        self.assertEquals(self.maps.getParticleIds()[0], 12)
        self.assertEquals(len(self.maps.getEnergies(12)), 1)

    def testGetRandomParticlesInterface(self):
        self.maps.addParticle(12, 1 * EeV, 0, 0)
        ids, energies, lons, lats = self.maps.getRandomParticles(10)
        self.assertEqual(len(ids), 10)
        self.assertEqual(len(energies), 10)
        self.assertEqual(len(lons), 10)
        self.assertEqual(len(lats), 10)


if __name__ == '__main__':
    unittest.main()
